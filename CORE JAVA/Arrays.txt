Arrays in Java
--------------
1) Introduction
2) Array declaration
3) Array Creation
4) Array Initialization
5) Array Declaration, Creation & Initialization in a Single Line
6) length vs length()
7) Anonymous Arrays
8) Array element assignments
9) Array variable assignments

1) Introduction of Array:
-------------------------
An array is an indexed collection of fixed number of homogeneous data elements.
a) Arrays are Fixed in Size.
b) Arrays can hold only homogeneous data type elements.

The main advantage of arrays is we can represent huge no of values by using single variable
so that readability of the code will be improved.

But the main disadvantage of arrays is fixed in size i.e. once we creates an array there is no chance of 
increasing or decreasing the size based on our requirement hence to use arrays concept compulsary we should
know the size in advance, which may not possible always.

2) Array Declaration:
---------------------
one dimensional array declaration:
----------------------------------

1) int[] x; valid (recommended) --> This one is recommanded because name is clearly separated from type
2) int []x; valid 
3) int x[]; valid

4) int[6] x; (invalid) At the time of declaration we can't specify the size otherwise we will get compile time
   error (important conclusion)
5) int[] x; valid

Two dimensional array declaration:
----------------------------------
int[][] x; valid
int [][]x; valid
int x[][]; valid
int[] []x; valid
int[] x[]; valid 
int []x[]; valid 
All are valid declarations

Q) Which of the following are valid ?

int[] a,b; a's dimension -> 1 , b's dimension -> 1

int[] a[],b;a's dimension -> 2 , b's dimension -> 1

int[] a[],b[]; a's dimension -> 2 , b's dimension -> 2

int[] []a,b; a's dimension -> 2 , b's dimension -> 2 (space is ignored)

int[] []a,b[]; a's dimension -> 2 , b's dimension -> 3 (space is ignored)

int[] []a,[]b; invalid ---> CE

If we want to specify dimension before the variable that facelity is applicable only for 1st variable 
in a declaration If we are trying to apply for remaining variable we will get compile time error.

int[] []a,[]b,[]c; ---> it is invalid syntax

Three dimensional array declaration:
------------------------------------
int[][][] a; valid
int [][][]a; valid
int a[][][]; valid
int[] [][]a; valid
int[] a[][]; valid
int[] []a[]; valid
int[][] []a; valid
int[][] a[]; valid
int [][]a[]; valid
int []a[][]; valid 
All are valid declarations

Array Creation :
----------------
Every array in java is an object only hence we can create arrays by using 'new' operator.
For array type corresponding class available and these class are part of java language and not available to the 
programmer level.
Example:
int[] a = new int[3]; 
System.out.println(a.getClass().getName()); CI

Array Type      corresponding class name
-----------------------------------------
   int[]   ------> CI
   int[][] ------> CCI
   double[] -----> CD
   short[]  -----> CS
   byte[]   -----> CB
   boolean[] ----> CZ

 
 Conclusion:
 -----------

1) At the time of array creation compulsary we should specify the size otherwise we will get compile time Error.
 int[] x = new int[]; invalid 
 int[] x = new int[6]; valid
2) It is the legal to have an array with size 0 in java.
Example:
 int[] x = new int[0]; valid

3) If we are trying to specify array size with nagative int value than we will get runtime exception 
saying negative array size exception.

Example: 
int[] x = new int[-3]; 
RE: NegativeArraySizeException

4) To specify array size the allowed data types are byte,short , char , int if we are trying to specify 
any other type than we will get compile time error.

int[] x = new int[10]; valid
int[] y = new int['a']; valid
byte b = 20; valid
int[] z = new int[b]; valid 
short s = 30; valid
int[] w = new int[s]; valid
int[] r = new int[10L]; invalid CE: PLP, FOUND: long, required: int

5) the max allowed array size in java is 2147483647 which is the maximum value of int data type.
even in the 1st case we may get run exception if saficient heap memory is not available. 
int[] x = new int[2147483647]; valid
RE: java.lang.OutOfMemoryError: Resquested array size exceeds VM limit
int[] x = new int[2147483648]; invalid
CE: integer number too large

2Dimensional Array Creation:
----------------------------
In Java 2D array not implemented by using matrix style sun people followed array of arrays approach 
for multi-dimensional array creation.

The main advantage of this approach is memory untilization will be improved.

Example : 1
-----------
int[][] x = new int[2][];

x[0] = new int[2];
x[1] = new int[3];

Example : 2
-----------
int[][][] x = new int[2][][];

x[0] = new int[3][];
x[0][0] = new int[1];
x[0][1] = new int[2];
x[0][2] = new int[3];
x[1] = new int[2][2];

Q) which of the following array declarations are valid?
int[] a = new int[]; INVALID
int[] a = new int[3]; VALID
int[][] a = new int[][]; INVALID
int[][] a = new int[3][]; VALID
int[][] a = new int[][4]; INVALID
int[][] a = new int[3][4]; VALID
int[][][] a = new int[3][4][5]; VALID
int[][][] a = new int[3][4][]; VALID
int[][][] a = new int[3][][5]; INVALID
int[][][] a = new int[][4][5]; INVALID

Array Initialization:
---------------------
Once we creates an array every array element by default initialized with default values 
Example: 1
int[] x = new int[3];
System.out.println(x);  // CI@3e25a5
System.out.println(x[0]); // 0

whenever we trying to print any reference variable internally toString method will be called which is implemented
by default to return the string in the following form classname@hashCode_in_hexadecimalform.

Example: 2
		int[][] x = new int[3][2];
System.out.println(x); // CCI@3e25a5
System.out.println(x[0]); // CI@19821f
System.out.println(x[0][0]); // 0

Example: 3

int[][] x = new int[2][];
System.out.println(x); CCI@3e25a5
System.out.println(x[0]); null
System.out.println(x[0][0]); RE: NPE

Note: If we trying to perform any operation on null then we will get runtime exception saying null
pointer exception.

once we creates an array every array element by default initialized with default values if we 
are not satisfied with default value than we can override these values with our customized values.

Example : 
int[] x = new int[6];
x[0] = 10;
x[1] = 20;
x[2] = 30;
x[3] = 40;
x[4] = 50;
x[5] = 60;
x[6] = 70; RE: ArrayIndexOutOfBoundsException
x[-6] = 80; RE: ArrayIndexOutOfBoundsException
x[2.5] = 90; CE: PLP
             found: double
	     required: int
Note: If we are trying access array element with out of range index (either positive value or negative int value)
 then we will get runtime exception saying array indexoutofBoundsexception.

Array declaration, creation and initialization in a single line:
----------------------------------------------------------------
We can declare , create and initialize an array in a single line (shortcut representation) 

Example : 1
int[] x;
x = new int[3];
x[0] = 10;
x[1] = 20;
x[2] = 30;

Example : 2
int[] x = {10,20,30};
char[] ch = {'a','e','i','o','u'};
String[] s ={"A","AA","AAA"};

we can extend this shortcut even for multi-dimension arrays also.

Example:
--------
int[][] x = {{10,20},{30,40,50},{60,70,80,90}};

Example: 
--------
int[][][] x = {{{10,20,30},{40,50,60}},{{70,80},{90,100,110}}};

System.out.println(x[0][1][2]); // 60
System.out.println(x[1][0][1]); // 80
System.out.println(x[2][0][0]); RE : ARRAYINDEXOUTOFBOUNDSEXCEPTION
System.out.println(x[1][2][0]); RE: AIOOBE
System.out.println(x[1][1][1]); // 100
System.out.println(x[2][1][0]); RE: AIOOBE


if we want to use this shortcut compulsary we should perform 
all activities in a single line.

we are trying to divide into multiple line than we will get compile time 
error.

int x; valid
x = 10;valid

int[] x = {10,20,30}; valid line

int[] ar; valid line
ar = {10,20,30}; invalid line raise : CE
CE: illegal start of expression


length vs length()
------------------
length:
-------
length is a final variable applicable for arrays. length variable represents the size of 
array.

int[] x = new int[6];
System.out.println(x.length());
CE: cannot find symbol
symbol: method length()
location: class int[]

System.out.println(x.length); //Answer: 6  (valid for array type)

length():
---------
length() method is final method applicable for string objects. length() returns number of characters present 
in the String.
String s = "Durga";
System.out.println(s.length); // CE : cannot find symbol 
                                 symbol: variable length
				 location: class java.lang.String

System.out.println(s.length());// 5 (valid for string)

Note : length variable applicable for arrays but not for Strings. where as length() applicable for string objects
       but not for arrays.

Q) which of the following are valid?
String[] s = {"A","AA","AAA"};
1) System.out.println(s.length); valid // Answer: 3
2) System.out.println(s.length()); invalid // CE: cannot find symbol   
                                              symbol: method length()  
					      location: class string[]
3) System.out.println(s[0].length); invalid // CE: cannot find symbol
                                               symbol: variable length
					       location: class j.l.String

4) System.out.println(s[0].length()); valid // Answer: 1


In Multi-dimensional array length variable represents only base size but not total size.
 
int[][] x = new int[6][3];
System.out.println(x.length);  // 6
System.out.println(x[0].length); // 3
there is no directway to Total length of multi-dimensional array but indirectly we find as follows.

x[0].length + x[1].length+x[2].length+x[3].length...

Anonymous array:
----------------
The main purpose of anonymous arrays just for instant use (one - time usage).
we can create anonymous array as follows 

new int[]{10,20,30,40}

Example: 
class Test{
public static void main(String[] args)
{
sum(new int[]{10,20,30,40});
}
public static void sum(int[] x)
{
int total = 0;
for (int x1 : x)
{
total = total + x1;
}
System.out.println("The sum:"+total);
}
}

while creating anonymous arrays we can't specify the size otherwise 
we will get compile time error.

new int[3]{10,20,30} invalid
new int[]{10,20,30} valid

we can create multi-dimensional anonymous arrays also 
new int[][]{{10,20},{30,40,50}} valid

Based on our requirement we can give the name for anonymous array then it is no long anonymous.

int[] x = new int[]{10,20,30}; valid


Array element assignments
-------------------------
case 1: 

In the case of primitive type arrays as array elements we can provide any type which can be
implicitly promoted to declared type.
Example: 
--------
int[] x = new int[5];
x[0] = 10;;
x[1] = 'a';  valid // saved unicode of 'a' is 97
byte b = 20;
x[2] = b; valid
short s = 30;
x[3] = s; valid
x[4] = 10L; invalid CE:PLP
                    found: long
		    required: int
Example : 2
In the case of float type arrays the allowed data types are byte,short ,char , int , long ,float.

case 2: 
In the case of the object type arrays as array elements we can provide either declared type objects
are its child class objects.
Example:1
Object[] a = new Object[10];
a[0] = new Object(); valid
a[1] = new String("durga"); valid
a[2] = new Integer(10); valid
Example:2

Number[] n = new Number[10];
Number child class --> byte,short,int,long,float,double
n[0] = new Integer(10); valid
n[1] = new Double(10.5); valid
n[2] = new String("Durga"); invalid
CE: incompatible types
found: j.l.string
required:j.l.Number

Case 3:
For interface type arrays as array element its implementation class objects are allowed.
Runnable[] r = new Runnable[10];
r[0] = new Thread();
r[1] = new String("durga");
CE: incompatible types
found: java.lang.string
required: java.lang.Runnable

Array Type            Allowed element Types
---------------------------------------------
primitive arrays     |  Any type which can be implicitly promoted to declared type

---------------------------------------------------------------------------------------
object type Arrays   |  Either declared type or its child class Objects

----------------------------------------------------------------------------------------
Abstract class Type  |  Its child class Objects are allowed
     Arrays
-----------------------------------------------------------------------------------------
interface type arrays | Its implementation class Objects are allowed
-----------------------------------------------------------------------------------------


Array variable assignments
--------------------------
case 1: 
element level promotions are not applicable at array level for example char element can be promoted to 
int type where as char array cannot be promoted to int array.


int[] x = {10,20,30};
char[] ch = {'a','e','i','o','u'}; 
------------------------------------
int[] b = x; Valid
int[] c =ch; InValid
CE: incompatible type
found: char[]
required: int[]

Q) which of the following promotions will be performed automatically?
   
   char ----> int (valid conversion)
   char[] --> int[] (invalid conversion)
   int  ----> double (valid conversion)
   int[] ---> double[] (invalid conversion)
   float ---> int (invalid conversion)
   float[] --> int[] (invalid conversion)
   String ---> Object (valid conversion)
   String[] --> Object (valid conversion)
  But in the case of Object type arrays child class type array can be promoted to
  parent class type array.
case 2:

Example:1
---------
  String[] s = {'A','B','C'};
  Object[] a = s;
Example:2
---------
  whenever we are assigning one array to another array internal element cannot be 
  copied just reference variables reassigned.

  int[] a = {10,20,30,40,50};
  int[] b = {70,80};
  which is valid ?
  a = b (valid assignment)
  b = a (valid assignment)

  
 case 3:
  whenever we are assigning one array to another array the dimensions must be matched for example in the place of one dimensional int array
  we should provide one dimensional array only. if we are trying to provide any other dimension then we will get compile time error.


  int[][] a = new int[3][];
  a[0] = new int[4][3]; invalid 
  CE: incompatible types
  found: int[][]
  required: int[]

  a[0] = 10; invalid
  CE: incompatible types
  found: int
  required: int[]

  Note: whenever we asigining one array to another array both dimensions and types must be matched but sizes are not required to 
        match.

Q) Example 1:
-------------
class Test{
public static void main(String[] args)
{
for(int i=0;i<=args.length;i++)
{
System.out.println(args[i]);
}
}
}
OP:
---
java Test A B C 
A
B
C
RE:AIOOBE
java Test A B
A
B
RE:AIOOBE
java Test 
RE:AIOOBE

Q) Example 2:
-------------
class Test
{
public static void main(String[] args)
{
String[] argh = {"x","y","z"};
args = argh;
for (String s:args)
{
System.out.println(s);
}
}
}

OP:
---
java Test A B C
x
y
z
java Test A B
x
y
z
java Test
x
y
z

Q) Example 3:
-------------
int[][] a = new int[4][3];
a[0] = new int[4];
a[1] = new int[2];
a = new int[3][2];

1) Total how many objects created? 12 objects are created
            
2) Total how many objects eligible for GC? 8 objects are eligible for GC






  
   

